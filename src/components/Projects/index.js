import React from 'react';

import Anchor from "../Anchor";

import cssIcon from '../../img/icons/css.svg';
import htmlIcon from '../../img/icons/html5.svg';
import jsIcon from '../../img/icons/javascript.svg';
import mysqlIcon from '../../img/icons/mysql.svg';
import nodeIcon from '../../img/icons/nodejs.svg';
import pythonIcon from '../../img/icons/python.svg';
import reactIcon from '../../img/icons/react.svg';
import scIcon from '../../img/icons/styled-components.png';

import styles from './Projects.module.css';


export default class Projects extends React.Component {
  constructor(props) {
    super(props);
    this.projectOne = {
      name: "Chatter-bot",
      id: "chatter-bot",
      type: "Web Application",
      techUsed: ["React", "styled-components", "JavaScript", "Express/Node.js", "MySQL"],
      overview: "Create posts, chat rooms, and user accounts for topical discussion.",
      details: [
        "Create posts up to 255 characters in length",
        "Pre-validation of form for an intuitive user experience",
        "Random post is pulled from the entire collection of previous user posts",
      ],
      link: "",
      gitLink: "https://github.com/jodyanna/chatter-bot",
    }
    this.projectTwo = {
      name: "Spiral Designs",
      id: "spiral-designs",
      type: "Interactive Website",
      techUsed: ["JavaScript", "CSS", "HTML"],
      overview: "Watch an arithmetic spiral spin endlessly in this mesmerizing interactive application.",
      details: [
        "Spiral animation renders at 10 frames per second with settings updated every frame",
        "Colors are customizable using RGB value separated sliders",
        "Spiral width, length, and thickness adjusted via designated sliders"
      ],
      link: "https://spiral-designs.netlify.app/",
      gitLink: "https://github.com/jodyanna/spiral_designs",
    }
    this.projectThree = {
      name: "My Portfolio",
      id: "portfolio",
      type: "Website",
      techUsed: ["React", "JavaScript", "CSS", "HTML"],
      overview: "This website you are on right now!",
      details: [
        "GitHub account summary generated by requesting data from GitHub's API",
        "Light and dark theme toggle switch",
        "Mobile first responsive design with custom CSS styles",
      ],
      link: "#",
      gitLink: "https://github.com/jodyanna/portfolio_v2",
    }
  }

  render() {
    return (
      <section>
        <Anchor name={"projects"} />
        <h2>Projects</h2>
        <Anchor name={this.projectOne.id} />
        <Project project={this.projectOne} hr={this.props.hr} />
        <Anchor name={this.projectTwo.id} />
        <Project project={this.projectTwo} hr={this.props.hr} />
        <Anchor name={this.projectThree.id} />
        <Project project={this.projectThree} hr={this.props.hr} />
      </section>
    );
  }
}

class Project extends React.Component {
  constructor(props) {
    super(props);
    this.icons = {
      "JavaScript": jsIcon,
      "HTML": htmlIcon,
      "CSS": cssIcon,
      "Python": pythonIcon,
      "Express/Node.js": nodeIcon,
      "MySQL": mysqlIcon,
      "React": reactIcon,
      "styled-components": scIcon,
    }
  }

  render() {
    const renderTechList = () => {
      return this.props.project.techUsed.map(tech => <TechFig key={tech} tech={tech} icons={this.icons} />)
    }

    const renderDetails = () => {
      return this.props.project.details.map((desc, i) => <li key={i} className={styles.li}>{desc}</li>)
    }

    const renderLink = () => {
      return this.props.project.link === "#" ? "" : <a href={this.props.project.link} className={styles.link}>Live Demo</a>
    }

    return (
      <article className={styles.article}>
        <div className={styles.heading}>
          <h3 className={styles.name}>{this.props.project.name}</h3>
          <h4 className={styles.caption}>{this.props.project.type}</h4>
          <div className={styles.links}>
            {renderLink()}
            <a href={this.props.project.gitLink} className={styles.link}>Code</a>
          </div>
        </div>
        {this.props.hr}
        <div className={styles.techs}>
          {renderTechList()}
        </div>
        <div className={styles.overview}>
          {this.props.project.overview}
        </div>
      </article>
    );
  }
}


function TechFig(props) {
  return (
    <figure className={styles.iconContainer}>
      <img src={props.icons[props.tech]} alt={props.tech} className={styles.icon}/>
      <figcaption className={styles.caption}>{props.tech}</figcaption>
    </figure>
  );
}